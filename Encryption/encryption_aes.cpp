#include <stdint.h>
#include <cstddef>
#include "aes.hpp"

static const uint8_t s_box[256] = {
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

static const uint8_t inv_s_box[256] = {
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
};

static const uint8_t rcon[11] = {
    0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36
};

static void sub_bytes(uint8_t *state)
{
    size_t index = 0;
    while (index < 16)
    {
        state[index] = s_box[state[index]];
        ++index;
    }
    return ;
}

static void inv_sub_bytes(uint8_t *state)
{
    size_t index = 0;
    while (index < 16)
    {
        state[index] = inv_s_box[state[index]];
        ++index;
    }
    return ;
}

static void shift_rows(uint8_t *state)
{
    uint8_t temp;
    uint8_t temp_two;

    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;

    temp = state[2];
    temp_two = state[6];
    state[2] = state[10];
    state[6] = state[14];
    state[10] = temp;
    state[14] = temp_two;

    temp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = temp;
    return ;
}

static void inv_shift_rows(uint8_t *state)
{
    uint8_t temp;
    uint8_t temp_two;

    temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;

    temp = state[2];
    temp_two = state[10];
    state[2] = state[6];
    state[6] = state[14];
    state[14] = temp_two;
    state[10] = temp;

    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;
    return ;
}

static uint8_t xtime(uint8_t value)
{
    uint8_t high_bit = value & 0x80;
    value <<= 1;
    if (high_bit)
        value ^= 0x1b;
    return (value);
}

static uint8_t multiply(uint8_t value, uint8_t multiplier)
{
    uint8_t result = 0;
    uint8_t bit_index = 0;
    while (bit_index < 8)
    {
        if (multiplier & 1)
            result ^= value;
        uint8_t high_bit = value & 0x80;
        value <<= 1;
        if (high_bit)
            value ^= 0x1b;
        multiplier >>= 1;
        ++bit_index;
    }
    return (result);
}

static void mix_columns(uint8_t *state)
{
    uint8_t column = 0;
    while (column < 4)
    {
        uint8_t index = column * 4;
        uint8_t s0 = state[index];
        uint8_t s1 = state[index + 1];
        uint8_t s2 = state[index + 2];
        uint8_t s3 = state[index + 3];

        uint8_t r0 = xtime(s0) ^ (xtime(s1) ^ s1) ^ s2 ^ s3;
        uint8_t r1 = s0 ^ xtime(s1) ^ (xtime(s2) ^ s2) ^ s3;
        uint8_t r2 = s0 ^ s1 ^ xtime(s2) ^ (xtime(s3) ^ s3);
        uint8_t r3 = (xtime(s0) ^ s0) ^ s1 ^ s2 ^ xtime(s3);

        state[index] = r0;
        state[index + 1] = r1;
        state[index + 2] = r2;
        state[index + 3] = r3;

        ++column;
    }
    return ;
}

static void inv_mix_columns(uint8_t *state)
{
    uint8_t column = 0;
    while (column < 4)
    {
        uint8_t index = column * 4;
        uint8_t s0 = state[index];
        uint8_t s1 = state[index + 1];
        uint8_t s2 = state[index + 2];
        uint8_t s3 = state[index + 3];

        uint8_t r0 = multiply(s0, 0x0e) ^ multiply(s1, 0x0b) ^ multiply(s2, 0x0d) ^ multiply(s3, 0x09);
        uint8_t r1 = multiply(s0, 0x09) ^ multiply(s1, 0x0e) ^ multiply(s2, 0x0b) ^ multiply(s3, 0x0d);
        uint8_t r2 = multiply(s0, 0x0d) ^ multiply(s1, 0x09) ^ multiply(s2, 0x0e) ^ multiply(s3, 0x0b);
        uint8_t r3 = multiply(s0, 0x0b) ^ multiply(s1, 0x0d) ^ multiply(s2, 0x09) ^ multiply(s3, 0x0e);

        state[index] = r0;
        state[index + 1] = r1;
        state[index + 2] = r2;
        state[index + 3] = r3;

        ++column;
    }
    return ;
}

static void add_round_key(uint8_t *state, const uint8_t *round_key)
{
    size_t index = 0;
    while (index < 16)
    {
        state[index] ^= round_key[index];
        ++index;
    }
    return ;
}

static void key_expansion(const uint8_t *key, uint8_t *round_keys)
{
    size_t index = 0;
    while (index < 16)
    {
        round_keys[index] = key[index];
        ++index;
    }
    size_t bytes_generated = 16;
    size_t rcon_iteration = 1;
    uint8_t temp[4];
    while (bytes_generated < 176)
    {
        size_t temp_index = 0;
        while (temp_index < 4)
        {
            temp[temp_index] = round_keys[bytes_generated - 4 + temp_index];
            ++temp_index;
        }
        if (bytes_generated % 16 == 0)
        {
            uint8_t byte_temp = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = byte_temp;

            size_t s_index = 0;
            while (s_index < 4)
            {
                temp[s_index] = s_box[temp[s_index]];
                ++s_index;
            }
            temp[0] ^= rcon[rcon_iteration];
            ++rcon_iteration;
        }
        temp_index = 0;
        while (temp_index < 4)
        {
            round_keys[bytes_generated] = round_keys[bytes_generated - 16] ^ temp[temp_index];
            ++bytes_generated;
            ++temp_index;
        }
    }
    return ;
}

void aes_encrypt(uint8_t *block, const uint8_t *key)
{
    uint8_t round_keys[176];
    key_expansion(key, round_keys);
    add_round_key(block, round_keys);
    uint8_t round = 1;
    while (round < 10)
    {
        sub_bytes(block);
        shift_rows(block);
        mix_columns(block);
        add_round_key(block, round_keys + round * 16);
        ++round;
    }
    sub_bytes(block);
    shift_rows(block);
    add_round_key(block, round_keys + 160);
    return ;
}

void aes_decrypt(uint8_t *block, const uint8_t *key)
{
    uint8_t round_keys[176];
    key_expansion(key, round_keys);
    add_round_key(block, round_keys + 160);
    uint8_t round = 9;
    while (round > 0)
    {
        inv_shift_rows(block);
        inv_sub_bytes(block);
        add_round_key(block, round_keys + round * 16);
        inv_mix_columns(block);
        --round;
    }
    inv_shift_rows(block);
    inv_sub_bytes(block);
    add_round_key(block, round_keys);
    return ;
}

