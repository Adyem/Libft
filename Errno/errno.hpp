#ifndef ERRNO_HPP
# define ERRNO_HPP

int &ft_errno_reference(void);

#define ft_errno (ft_errno_reference())

#define ERRNO_OFFSET 2000

enum PTErrorCode
{
    ER_SUCCESS = 0,
    FT_ERR_NO_MEMORY,
    FT_ERR_INVALID_ARGUMENT,
    FT_ERR_INVALID_POINTER,
    FT_ERR_INVALID_HANDLE,
    FT_ERR_INVALID_OPERATION,
    FT_ERR_INVALID_STATE,
    FT_ERR_NOT_FOUND,
    FT_ERR_ALREADY_EXISTS,
    FT_ERR_OUT_OF_RANGE,
    FT_ERR_EMPTY,
    FT_ERR_FULL,
    FT_ERR_IO,
    FT_ERR_OVERLAP,
    FT_ERR_TERMINATED,
    FT_ERR_INTERNAL,
    FT_ERR_CONFIGURATION,
    FT_ERR_UNSUPPORTED_TYPE,
    FT_ERR_ALREADY_INITIALIZED,
    FT_ERR_INITIALIZATION_FAILED,
    FT_ERR_END_OF_FILE,
    FT_ERR_DIVIDE_BY_ZERO,
    FT_ERR_BROKEN_PROMISE,
    FT_ERR_SOCKET_CREATION_FAILED,
    FT_ERR_SOCKET_BIND_FAILED,
    FT_ERR_SOCKET_LISTEN_FAILED,
    FT_ERR_SOCKET_CONNECT_FAILED,
    FT_ERR_INVALID_IP_FORMAT,
    FT_ERR_SOCKET_ACCEPT_FAILED,
    FT_ERR_SOCKET_SEND_FAILED,
    FT_ERR_SOCKET_RECEIVE_FAILED,
    FT_ERR_SOCKET_CLOSE_FAILED,
    FT_ERR_SOCKET_JOIN_GROUP_FAILED,
    FT_ERR_SOCKET_RESOLVE_FAILED,
    FT_ERR_SOCKET_RESOLVE_BAD_FLAGS,
    FT_ERR_SOCKET_RESOLVE_AGAIN,
    FT_ERR_SOCKET_RESOLVE_FAIL,
    FT_ERR_SOCKET_RESOLVE_FAMILY,
    FT_ERR_SOCKET_RESOLVE_SOCKTYPE,
    FT_ERR_SOCKET_RESOLVE_SERVICE,
    FT_ERR_SOCKET_RESOLVE_MEMORY,
    FT_ERR_SOCKET_RESOLVE_NO_NAME,
    FT_ERR_SOCKET_RESOLVE_OVERFLOW,
    FT_ERR_GAME_GENERAL_ERROR,
    FT_ERR_GAME_INVALID_MOVE,
    FT_ERR_MUTEX_NOT_OWNER,
    FT_ERR_MUTEX_ALREADY_LOCKED,
    FT_ERR_SSL_WANT_READ,
    FT_ERR_SSL_WANT_WRITE,
    FT_ERR_SSL_ZERO_RETURN,
    FT_ERR_BITSET_NO_MEMORY,
    FT_ERR_PRIORITY_QUEUE_EMPTY,
    FT_ERR_PRIORITY_QUEUE_NO_MEMORY,
    FT_ERR_SSL_SYSCALL_ERROR = 2005,
    FT_ERR_HTTP_PROTOCOL_MISMATCH = 2006,
};

const char* ft_strerror(int error_code);
void        ft_perror(const char *error_msg);
void            ft_exit(const char *error_msg, int exit_code);

#endif
