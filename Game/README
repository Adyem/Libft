# Game Module

The `ft_world` class can persist game state using JSON files.

```
ft_world world;
ft_character character;
ft_inventory inventory;
world.save_to_file("save.json", character, inventory);
world.load_from_file("save.json", character, inventory);
```

Call `ft_world::process_events` each tick to decrement event durations and remove expired entries.

Both helpers use the JSon module to read and write the `world`, `character`, `inventory`, and `equipment` groups.

Characters manage gear through an `ft_equipment` container. Slots such as head, chest, and weapon can be equipped or unequipped and the appropriate stat modifiers are applied automatically.

```
ft_item sword;
sword.set_modifier1_id(2);
sword.set_modifier1_value(5);
hero.equip_item(EQUIP_WEAPON, sword);
```

## Pathfinding

`ft_pathfinding` computes routes on grids and graphs.

```
ft_map3d grid(3, 3, 1, 0);
ft_pathfinding finder;
ft_vector<ft_path_step> path;
finder.astar_grid(grid, 0, 0, 0, 2, 2, 0, path);
```

`ft_world::plan_route` wraps grid pathfinding for convenience.

```
ft_world world;
world.plan_route(grid, 0, 0, 0, 2, 2, 0, path);
```

## Crafting

`ft_crafting` stores crafting recipes and converts ingredients into new items.

```
ft_crafting crafting;
ft_vector<int> ingredients;
ingredients.push_back(1);
ingredients.push_back(2);
crafting.register_recipe(1, ft_move(ingredients));
crafting.craft_item(inventory, 1, sword);
```
